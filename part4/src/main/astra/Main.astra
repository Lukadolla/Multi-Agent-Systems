agent Main {
    module EIS ei;
    module Console C;
    module System S;

    types tower_ont {
        formula free(string);
    }

    inference free(string X) :- ~ei.on(string Y, X);
    inference free(string X) :- X == "table";

    rule +!main(list args) {
        ei.launch("hw","dependency/tower-1.3.0.jar");
        ei.init();
	    ei.join();
        ei.link("gripper");
	    ei.startEnv();
        
        C.println("waiting for block d");
        wait(ei.block("d"));

        list L = [ "a", "b" ];
        !tower(L);
        list L2 = [ "b", "a", "d" ];
        !tower(L2);
        list L3 = [ "f", "a", "d", "e" ];
        !tower(L3);
    }

    rule +!tower(list L) {
        int i = list_count(L) - 1;

        !holding(at_index(L, i, string));
        !on(at_index(L, i, string), "table");
        i--;

        while(i >= 0) {
           !holding(at_index(L, i, string));
           !on(at_index(L, i, string), at_index(L, i+1, string));
           i--;
        }
    }
    
    rule +!holding(string target) : ~ei.holding(string Y) & free(target) {
        ei.pickup(target);
        wait(ei.holding(target));
    }

    rule +!holding(string target) : ~ei.holding(string Y) & ei.on(string X, target) {
            !destack(X);
            ei.pickup(target);
            wait(ei.holding(target));
        }

    rule +!destack(string target) : free(target) {
        !holding(target);!on(target, "table");
    }

    rule +!destack(string target) : ei.on(string Y, target) {
             !destack(Y);
             !destack(target);
        }


    rule +!on(string block, string target) : ei.holding(block) & free(target) {
        ei.putdown(block, target);
        wait(ei.on(block, target));
    }
}
